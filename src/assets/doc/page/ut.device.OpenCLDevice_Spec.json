{
  "className":"ut.device.OpenCLDevice_Spec",
  "statistics":{
    "runs":"8",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"7.265 seconds"
  },

  "title":"The OpenCLDevice Specification",
  "narrative":"Tensors need devices for execution!\n    By default we use the CPU as a default device, but sometimes we want to\n    use something more suitable for large amounts of data an a high degree of parallelization.\n    This is were the OpenCLDevice comes into play!\n    It is a Device implementation built on top of the JOCL library, a thin OpenCL API!\n    We expect the OpenCLDevice to stored tensors while still being able to read and write\n    data from and to stored tensors.\n    Also, an OpenCLDevice should allows us to compile OpenCL kernel code on the fly...",
  "headers":["\n            <h2> OpenCLDevice Integration Tests </h2>\n            <p>\n                Specified below are strict tests covering the behavior\n                of the OpenCLDevice when hosting tensors and executing \n                operations on them.\n            </p>\n        "],"tags":{},"see":[],
  "features":[ 
    {
      "id":"An OpenCLDevice loads tensors in a provided lambda temporarily.",
      "result":"PASS",
      "duration":"0.015 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"The first found OpenCLDevice instance.","code":[""]},
        {"kind":"and","text":"We create 2 tensors with different default devices.","code":[""]},
        {"kind":"expect","text":"At first, both tensors are stored where we said they should be.","code":[""]},
        {"kind":"and","text":"The two tensors should also know to which devices they belong!","code":[""]},
        {"kind":"and","text":"When we check their location in the lambda we expect them both to be on the device!","code":[""]},
        {"kind":"and","text":"After the lambda ran, we expect everything to be reverted.","code":[""]},
        {"kind":"and","text":"The two tensors should also know to which devices they belong!","code":[""]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"The \"getValue()\" method of an outsourced tensor will return the expected array type.",
      "result":"PASS",
      "duration":"0.019 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A new tensor.","code":[""]},
        {"kind":"expect","text":"This tensor is initially of type \"Double\", meaning it is backed by a \"double[]\" array internally...","code":[""]},
        {"kind":"when","text":"The tensor is being transferred to the first found OpencCLDevice...","code":[""]},
        {"kind":"then","text":"The data type of the tensor is being converted to single precision.","code":[""]},
        {"kind":"when","text":"The tensor value is being fetched...","code":[""]},
        {"kind":"then","text":"This value object is an instance of a \"float[]\" array because the device converted the value.","code":[""]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"The \"getData()\" method of an outsourced tensor will return null when outsourced.",
      "result":"PASS",
      "duration":"0.002 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A new tensor belonging to the first found OpenCLDevice instance.","code":[""]},
        {"kind":"expect","text":"The tensor start with having data stored within.","code":[""]},
        {"kind":"when","text":"The tensor is being stored on the device...","code":[""]},
        {"kind":"and","text":"The tensor value is being fetched...","code":[""]},
        {"kind":"then","text":"The value variable is null.","code":[""]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Ad hoc compilation produces executable kernel.",
      "result":"PASS",
      "duration":"0.348 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"----","code":[""]},
        {"kind":"expect","text":"The OpenCL device initially does not have the \"dummy_kernel\" we are going to create.","code":[""]},
        {"kind":"when","text":"Compiling a kernel called \"dummy_kernel\"...","code":[""]},
        {"kind":"then","text":"The OpenCL device contrary to before now has a kernel by this name.","code":[""]},
        {"kind":"and","text":"The device still references the source code od that kernel.","code":[""]},
        {"kind":"when","text":"Executing the kernel by passing the previously defined tensor...","code":[""]},
        {"kind":"then","text":"Each value within the tensor will all have the number 4 subtracted from it.","code":[""]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Ad hoc compilation works for WIP general purpose matrix multiplication.",
      "result":"PASS",
      "duration":"1.829 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"----","code":[""]},
        {"kind":"expect","text":"----","code":[""]},
        {"kind":"when","text":"----","code":[""]},
        {"kind":"then","text":"----","code":[""]},
        {"kind":"when","text":"----","code":[""]},
        {"kind":"then","text":"----","code":[""]},
        {"kind":"where","text":"----","code":[""]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Ad hoc matrix multiplication works for multiple of 16 matrices.",
      "result":"PASS",
      "duration":"0.927 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"----","code":[""]},
        {"kind":"expect","text":"----","code":[""]},
        {"kind":"when","text":"----","code":[""]},
        {"kind":"then","text":"----","code":[""]},
        {"kind":"when","text":"----","code":[""]},
        {"kind":"then","text":"----","code":[""]},
        {"kind":"where","text":"----","code":[""]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Ad hoc compilation works for custom simple row major based matrix multiplication.",
      "result":"PASS",
      "duration":"1.503 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"----","code":[""]},
        {"kind":"expect","text":"----","code":[""]},
        {"kind":"when","text":"----","code":[""]},
        {"kind":"then","text":"----","code":[""]},
        {"kind":"when","text":"----","code":[""]},
        {"kind":"then","text":"----","code":[""]},
        {"kind":"where","text":"Matrix multiplication kernel will work for all dimensions reasonably well!","code":[""]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Ad hoc compilation works for custom column major based tiled matrix multiplication.",
      "result":"PASS",
      "duration":"2.560 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create column major based matrices!","code":[""]},
        {"kind":"expect","text":"----","code":[""]},
        {"kind":"when","text":"----","code":[""]},
        {"kind":"then","text":"----","code":[""]},
        {"kind":"when","text":"----","code":[""]},
        {"kind":"then","text":"----","code":[""]},
        {"kind":"where","text":"This kernel will work for all dimensions well:","code":[""]}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}