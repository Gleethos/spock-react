{
  "className":"ut.tensors.Functional_Tensor_Spec",
  "statistics":{
    "runs":"4",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"2.471 seconds"
  },

  "title":"",
  "narrative":"",
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Tensor initialization lambdas produce expected tensors.",
      "result":"PASS",
      "duration":"0.629 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"Instantiating a tensor using an initializer lambda...","code":["Tsr t = Tsr.of(","    DataType.of( Integer.class ),","    [ 2, 3 ],","    ( int i, int[] indices ) -> { i - 2 }",")"]},
        {"kind":"then","text":"The tensor has been initialized with the expected values:","code":["t.toString() == \"(2x3):[-2.0, -1.0, 0.0, 1.0, 2.0, 3.0]\""]},
        {"kind":"when","text":"","code":["t = Tsr.of(","    DataType.of( String.class ),","    [ 2, 3 ],","    ( int i, int[] indices ) -> { i + ':' + indices.toString() }",")"]},
        {"kind":"then","text":"","code":["t.toString() == \"(2x3):[0:[0, 0], 1:[0, 1], 2:[0, 2], 3:[1, 0], 4:[1, 1], 5:[1, 2]]\""]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"We can analyse the values of a tensor using various predicate receiving methods",
      "result":"PASS",
      "duration":"0.705 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create 2 tensors, where one is a slice of the other.","code":[""]},
        {"kind":"expect","text":"We can also easily turn a tensor into a stream!","code":[""]},
        {"kind":"where","text":"----","code":[""]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"Tensor mapping lambdas produce expected tensors.",
      "result":"PASS",
      "duration":"0.583 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"Instantiating a tensor using an initializer lambda...","code":[""]},
        {"kind":"then","text":"The tensor has been initialized with the expected values:","code":[""]},
        {"kind":"when","text":"We want to perform an element wise mapping to a new tensor...","code":[""]},
        {"kind":"then","text":"We expect the returned tensor to be a String container whose Strings are formatted according to our mapping lambda.","code":[""]},
        {"kind":"and","text":"The original tensor should not have changed because no inline operation occurred.","code":[""]},
        {"kind":"where","text":"----","code":[""]}
      ],
      "problems":"[]"
    },
  
    {
      "id":"The \"map\" method is a shorter convenience method for mapping to the same type.",
      "result":"PASS",
      "duration":"0.524 seconds",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a tensor with a single element.","code":[""]},
        {"kind":"when","text":"We map the tensor to a new tensor of the same type.","code":[""]},
        {"kind":"then","text":"The new tensor should have the same value as the original tensor.","code":[""]},
        {"kind":"and","text":"The original tensor should not have changed because no inline operation occurred.","code":[""]},
        {"kind":"where","text":"----","code":[""]}
      ],
      "problems":"[]"
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}